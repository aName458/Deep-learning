# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tBuTySEp0f6CCvtWrVBwtE5T5-sMfenk
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

max_accuracy = 0

#make data
data = keras.datasets.mnist
(train_images, train_labels),(test_images, test_labels) = data.load_data()

train_images = train_images/255
test_images = test_images/255

total_classes = 10
train_vec_labels = keras.utils.to_categorical(train_labels, total_classes)
test_vec_labels = keras.utils.to_categorical(test_labels, total_classes)


#make model
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(128, activation='tanh'),
    keras.layers.Dense(128, activation='tanh'),
    keras.layers.Dense(128, activation='tanh'),
    keras.layers.Dense(128, activation='tanh'),
    keras.layers.Dense(total_classes, activation='tanh'),
])

model.compile(
    optimizer='sgd',
    loss='mean_squared_error',
    metrics=['accuracy'])

test_vec_labels = keras.utils.to_categorical(test_labels, total_classes)

for f in range(0,1,1):
  model.fit(train_images, train_vec_labels, epochs=1)
  eval_loss, eval_accuracy = model.evaluate(test_images,test_vec_labels, verbose=0) # Added verbose=0 to suppress output
  if "%.2f"%eval_accuracy > str(max_accuracy): # Corrected the comparison
    model.save("test.keras")
    max_accuracy = eval_accuracy


eval_loss, eval_accuracy = model.evaluate(test_images,test_vec_labels)
print("model accuracy: %.2f" %eval_accuracy)

model.save("test.keras")

model.save("test.keras")

eval_loss, eval_accuracy = model.evaluate(test_images, test_vec_labels, verbose=0)

new_model = keras.models.load_model('test.keras')
right_guesses = 0
wrong_guesses = 0
right_guesses2 = 0

#predict model
for j in range(0,100,1):
  prediction = new_model.predict(np.expand_dims(test_images[j], axis=0))
  max_prediction = prediction.argmax()

  for i in range(0,10,1):
    if max_prediction == i:
      if max_prediction != test_labels[j]:
        print(f"guessed number:{i}")
        print(f"label: {test_labels[j]}")
        right_guesses += 1
        wrong_guesses += 1
        plt.imshow(test_images[j], cmap=plt.get_cmap('gray'))
        plt.show()


      else:
        right_guesses += 1
        right_guesses2 += 1


print(f"{wrong_guesses} aus {right_guesses} falsch / {right_guesses2} richtig")
print("model accuracy: %.2f" %eval_accuracy)

